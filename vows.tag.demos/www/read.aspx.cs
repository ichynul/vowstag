using System;
using System.Linq;
using Tag.Vows.Web;
using model;

//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//    生成时间: 2016年02月24日 14:35:52。
//    应避免手动更改此文件。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
/*  Powered by VowsTag http://git.oschina.net/ichynul/vowstag/wikis/home  */

public partial class Page_read : xx.yy.Read
       /*重新指定了页面处理类，请确保 xx.yy.Read 直接或间接继承自'Tag.Vows.Web.TagPage'*/
{
    protected Article read;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            if (this.Befor_Load_Tags())
            {
                Bind_ReadTag_30_5();
                Load_LabelTag_16_6();
                Bind_ListTag_71_13();
                Bind_ListTag_55_16();
            }
        }
    }

    public void Bind_ReadTag_30_5()
    {
        /*id=request.id*/
        long long_id = long.MinValue;
        long.TryParse("" + Request.QueryString["id"],out long_id);

        read = db
.                Article.Where(x => x.IsLock != true).FirstOrDefault( b=>
                     b.ID == long_id
                    );
        if (read == null)
        {
            read = new Article();
        }
    }

    public void Load_LabelTag_16_6()
    {
        SubControl uc_label=(SubControl) LoadControl( "notice.ascx");
        uc_label.SetDb(db);
        uc_label.SetConfig(this.config);
        LabelTag_16_6.Controls.Add(uc_label);
    }

    public void Bind_ListTag_71_13()
    {
        /*orderby=id&desc=true&id<request.id&emptytext=没有了&take=1*/
        long long_id = long.MinValue;
        long.TryParse("" + Request.QueryString["id"],out long_id);
        var list = from a in db.Article.Where(x => x.IsLock != true)
                .Where( b=>
                     b.ID < long_id
                    )
                    select new
                    {
                        a.ID,
                        a.Title
                    };
        int totalsize = list.Count();
        list = list.OrderByDescending(c=>c.ID).Take(1);
        /*不分页，显示前 1条数据;*/
        if (list.Count() == 0)
        {
            empty_ListTag_71_13.Text = "<div class='emptydiv'><span class='emptytext'>没有了</span></div>";
            return;
        }
        ListTag_71_13.DataSource = list;
        ListTag_71_13.DataBind();
    }

    public void Bind_ListTag_55_16()
    {
        /*orderby=id&desc=false&id>read.id&take=1*/
        long long_ID_3 = read == null ? long.MinValue: read.ID;
        var list = from a in db.Article.Where(x => x.IsLock != true)
                .Where( b=>
                     b.ID > long_ID_3
                    )
                    select new
                    {
                        a.ID,
                        a.Title
                    };
        int totalsize = list.Count();
        list = list.OrderBy(c=>c.ID).Take(1);
        /*不分页，显示前 1条数据;*/
        if (list.Count() == 0)
        {
            empty_ListTag_55_16.Text = "<!--empty标签对，作用与emptytext差不多，但emptytext仅支持简单的文字，而empty可包含复杂的文本（如html） -->                <!-- -->                <span style=\"color: Red;\">没有了~</span>                <!-- -->                ";
            return;
        }
        ListTag_55_16.DataSource = list;
        ListTag_55_16.DataBind();
    }


    private Entities _db;
    protected Entities db
    {
        get
        {
            if (_db == null)
            {
                _db = new Entities();
            }
            return _db;
        }
    }

    protected override object GetDbObject()
    {
        return this.db;
    }
}