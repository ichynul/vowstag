<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TagCore</name>
    </assembly>
    <members>
        <member name="T:Tag.Vows.Tag.BaseTag">
             <summary>
            2015/07/15
            by lianghaiyun
             </summary>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.#ctor(System.String,System.String,System.Int32,Tag.Vows.Tool.TagConfig,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="mText">经过处理的标签文本（去除空格 \s*、br/hr替换）</param>
            <param name="mOrigin">原始标签文本</param>
            <param name="mDeep">嵌套深度</param>
            <param name="config">配置</param>
            <param name="no_">标签的递增编码</param>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.ReplaceTagText(System.String)">
            <summary>
            将标签文本替换成名称...{tagtext...} => tagname
            </summary>
            <param name="PageHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.RecoverTagText(System.String)">
            <summary>
            将标签成名称替换为经过处理的文本... tagname => tagcode
            </summary>
            <param name="PageHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.ConvertTagPair">
            <summary>
            当执行标签对转换时调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.GetTagName">
            <summary>
            获取标签名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.GetPlaceholderName">
            <summary>
            获取占位名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.GetMsg">
            <summary>
            获取生成时的错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.GetCodeForAspx">
            <summary>
            子类实现将标签转换为代码的具体逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.Discover">
            <summary>
            子类实现一些初始化工作
            </summary>
        </member>
        <member name="M:Tag.Vows.Tag.BaseTag.ToTagString">
            <summary>
            输出标签的内容，以供调试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Data.DataHelper.GetType(System.Object,System.String,System.Boolean@,System.String@)">
            <summary>
            根据给定的属性名称返回属性类型
            </summary>
            <param name="obj">实例</param>
            <param name="name">字段名称</param>
            <param name="isNullAble">是否为NullAble</param>
            <param name="newName">新的名称（纠正大小写）</param>
            <returns>字段类型</returns>
        </member>
        <member name="M:Tag.Vows.Data.DataHelper.GetPropertyName(System.Object,System.String)">
            <summary>
            获取字段的名称
            </summary>
            <param name="obj">实例</param>
            <param name="name">字段名称（不区分大小写）</param>
            <returns>字段的真实名称（区分大小写）</returns>
        </member>
        <member name="M:Tag.Vows.Data.DataHelper.GetProperty(System.Object,System.String)">
            <summary>
            根据字段名称获取字段
            </summary>
            <param name="obj">实例</param>
            <param name="name">字段名称</param>
            <returns>字段信息</returns>
        </member>
        <member name="M:Tag.Vows.Web.CallBackResult.#ctor(System.Object)">
            <summary>
             请求的结果
            </summary>
            <param name="result">string 或 object</param>
        </member>
        <member name="T:Tag.Vows.Tag.StaticTag">
             <summary>
            HeadTag 的摘要说明
             </summary>
        </member>
        <member name="F:Tag.Vows.Web.TagPage.config">
            <summary>
            用于保存站点及页面的通用信息
            </summary>
        </member>
        <member name="F:Tag.Vows.Web.TagPage._callBackstr">
            <summary>
            callBack 时请求参数
            </summary>
        </member>
        <member name="M:Tag.Vows.Web.TagPage.CallValue(System.String)">
            <summary>
            用于从查询 callBack时 arg 参数值
            </summary>
            <param name="key">key值</param>
            <returns>value值</returns>
        </member>
        <member name="M:Tag.Vows.Web.TagPage.DoCallBack">
            <summary>
            重写本方法以处理自定义的callback
            </summary>
            <returns>处理结果</returns>
        </member>
        <member name="M:Tag.Vows.Web.TagPage.TagCallBack">
            <summary>
            供 JsonTag和FormTag 重写，请勿手动重写本方法
            </summary>
            <returns>处理结果</returns>
        </member>
        <member name="T:Tag.Vows.Page.BasePage">
             <summary>
            At 2015/07/15
            By ichynul@outlook.com
             </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.#ctor(System.String,System.String,System.Int32,Tag.Vows.Tool.TagConfig)">
            <summary>
            页面入口方法,以文件路径
            </summary>
            <param name="mHtmlpPath">somepage.html文件路径</param>
            <param name="mPageName">页面名称,如: somepage </param>
            <param name="mDeep">嵌套深度</param>
            <param name="config">配置信息</param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.#ctor(System.String,System.Int32,Tag.Vows.Tool.TagConfig,System.String)">
            <summary>
            页面入口方法,以html文本
            </summary>
            <param name="style">html文本</param>
            <param name="mDeep">嵌套深度</param>
            <param name="config">配置信息</param>
            <param name="fakeName">虚拟的页面名称</param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.GetTegs(System.Boolean)">
            <summary>
            解析所有标签
            </summary>
            <param name="style">是否是以文本初始化</param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.DissAbleServerScript">
            <summary>
            服务端代码安全检测 禁用 &lt;% ...%&gt;和%&lt;cript runat="server"&gt;....&lt;/script&gt;
            </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.ReplaceSpacesAndMatchAll">
            <summary>
            将可能的标签格式化及去除空格，以作进一步匹配
            </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.MatchTag(System.String,System.String,System.Text.RegularExpressions.Regex,Tag.Vows.Enum.TagType)">
            <summary>
            测试标签
            </summary>
            <param name="text">文本（经过格式化）</param>
            <param name="origin">原始文本</param>
            <param name="regex">正则表达式</param>
            <param name="type">目标标签类型</param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.RePathJsCssImg">
            <summary>
            替换html中的图片、js、cs等资源的路径
            </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.GetCMD(Tag.Vows.Tag.CMDTag)">
            <summary>
            获取cmd标签的内容
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.DoForPager">
            <summary>
            for Pager
            </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.DoForRead">
            <summary>
            for Read
            </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.DoForForm">
            <summary>
            for Form
            </summary>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.ReplaceEnd(System.Boolean)">
            <summary>
            清除标签的结尾符号
            </summary>
            <param name="includelistAndRead"></param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.FindListOrReadPairs(System.String,System.Int32)">
            <summary>
            查找可能嵌套的list、read
            </summary>
            <param name="text"></param>
            <param name="deep"></param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.FindIfPairs(System.String)">
            <summary>
            查找ifgroup
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.GetAspxCode">
            <summary>
            获取页面aspx 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Page.BasePage.MakePage">
            <summary>
            生成页面
            </summary>
        </member>
        <member name="T:Tag.Vows.Web.Method">
             <summary>
            Method 的摘要说明
             </summary>
        </member>
        <member name="T:Tag.Vows.Tool.Pager">
            <summary>
            2015/07/25
            by liagnhaiyun
            </summary>
        </member>
        <member name="F:Tag.Vows.Web.SubControl.config">
            <summary>
            用于保存站点及页面的通用信息
            </summary>
        </member>
        <member name="F:Tag.Vows.Web.SubControl._page">
            <summary>
            callBack 时请求参数
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.MAXDEEP">
            <summary>
            最大镶套层次，超过这个深度的自页面略过，防止循环镶套
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.input">
            <summary>
            请设置输入目录的相对路径
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.protected_tables">
            <summary>
            受保护的表名，多个用|分割。
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.creatScriptForAllPages">
            <summary>
            是否为所有页面生成callBack的js支持，默认为false。
            若设置为true，则无论页面中是否有callbase 指令都为每一个页面生成js支持
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.allowServerScript">
            <summary>
            是否允许直接书写服务端脚本（如 &lt;% somecode %&gt;&lt;script runat="server"&gt;somecode &lt;/script&gt;）。
            出于安全考虑，默认不允许，建议在 cs代码中实现该逻辑的方法,然后用方法标签调用：{ dosome() }
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.DefaultBase">
            <summary>
            所有页面默认默认处理类,默认为 Tag.Vows.TagPage
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.convert_pairs">
            <summary>
            若要转换标签对（convert==true），则传入模板标签的 new string[2]{"left","right"};
            </summary>
        </member>
        <member name="F:Tag.Vows.Tool.TagConfig.convert">
            <summary>
            是否执行标签转换
            </summary>
        </member>
        <member name="M:Tag.Vows.Tool.TagConfig.MakePage(System.String,System.String@)">
            <summary>
            页面入口，需要页面结构信息
            </summary>
            <param name="pagename">页面名称</param>
            <param name="PageString">结构信息</param>
            <returns>页面错误信息</returns>
        </member>
        <member name="M:Tag.Vows.Tool.TagConfig.MakePage(System.String)">
            <summary>
            页面入口，不需要页面结构信息
            </summary>
            <param name="pagename">页面名称</param>
            <returns>页面错误信息</returns>
        </member>
        <member name="M:Tag.Vows.Tool.TagConfig.GetOutputAbsoPath">
            <summary>
            获取绝对输出路径
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tag.Vows.Tool.TagConfig.dbNameSpace">
            <summary>
            Entities 类的命名空间，自动获取
            </summary>
        </member>
        <member name="P:Tag.Vows.Tool.TagConfig.entitiesName">
            <summary>
            Entities 类的类名，自动获取
            </summary>
        </member>
        <member name="P:Tag.Vows.Tool.TagConfig.current_pairs">
            <summary>
            生成页面时使用的标签对支持正则表达式
            如new string[2]{"\{[@#$%]","\}"}，可匹配四种类型的标签对:
            {@.../}、{#.../}、{$.../}、{%.../}，不建议，这样的话可以同时使用不同风格的标签对。
            也可只传入其中一种如 new string[2]{"\{@","\}"}。
            某些情况下会引起正则表达式的混淆，则应进行\转义。
            </summary>
        </member>
        <member name="P:Tag.Vows.Tool.TagConfig.output">
            <summary>
            请设置输出目录的相对路径
            </summary>
        </member>
        <member name="P:Tag.Vows.Tool.TagConfig.db">
            <summary>
            请传入Entities类的实例，
            </summary>
        </member>
        <member name="M:Tag.Vows.Data.TempleHelper.Linq_getJson(System.String,System.String,System.String@,System.String)">
            <summary>
            拼接Json查询语句
            </summary>
            <param name="listname">要获取数据的表名称</param>
            <param name="panmes">字段名称数组</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Tag.Vows.Data.TempleHelper.GetModObj(System.String)">
            <summary>
            根据表名返回一个表的实例 
            </summary>
            <param name="dataname">表名</param>
            <returns>实例</returns>
        </member>
        <member name="M:Tag.Vows.Data.TempleHelper.GetTableName(System.String)">
            <summary>
            根据表名称推测正确的表名
            </summary>
            <param name="name">原表名（可能大小写不对）</param>
            <returns>正确的表名</returns>
        </member>
    </members>
</doc>
